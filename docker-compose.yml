version: "3"
services:
  database.postgres:
    image: sameersbn/postgresql:latest
    container_name: postgres
    environment:
      - PG_PASSWORD=ttrss # please change the password
      - DB_EXTENSION=pg_trgm
    volumes:
      - ~/postgres/data/:/var/lib/postgresql/ # persist postgres data to ~/postgres/data/ on the host
    restart: always
    
  service.rss:
    image: wangqiru/ttrss:latest
    container_name: ttrss
    expose:
      - 80
    environment:
      - VIRTUAL_HOST=rss.example.com # please change to your own domain
      - LETSENCRYPT_HOST=rss.example.com # please change to your own domain
      - LETSENCRYPT_EMAIL=admin@example.com # please change to your own domain
      - SELF_URL_PATH=https://rss.example.com/ # please change to your own domain
      - DB_HOST=database.postgres
      - DB_PORT=5432
      - DB_NAME=ttrss
      - DB_USER=postgres
      - DB_PASS=password # please change the password
      - ENABLE_PLUGINS=auth_internal,fever # auth_internal is required. Plugins enabled here will be enabled for all users as system plugins
    stdin_open: true
    tty: true
    restart: always
    command: sh -c 'sh /wait-for.sh database.postgres:5432 -- php /configure-db.php && exec s6-svscan /etc/s6/'
    networks:
      - proxy-tier
      - default
      
  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
    image: wangqiru/mercury-parser-api:latest
    container_name: mercury
    expose:
      - 3000
    restart: always

  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page
    image: wangqiru/opencc-api-server:latest
    container_name: opencc
    environment:
      NODE_ENV: production
    expose:
      - 3000
    restart: always
    
  service.rsshub:
    image: diygod/rsshub
    restart: always
    expose:
      - 1200
    environment:
      - VIRTUAL_HOST=blog.example.com # please change to your own domain
      - LETSENCRYPT_HOST=blog.example.com # please change to your own domain
      - LETSENCRYPT_EMAIL=admin@example.com # please change to your own domain
      - NODE_ENV: production
      - CACHE_TYPE: redis
      - REDIS_URL: 'redis://db.redis:6379/'
      - PUPPETEER_WS_ENDPOINT: 'ws://service.browserless:3000'
    depends_on:
      - db.redis
      - service.browserless
    networks:
      - proxy-tier
      - default

  service.browserless:
    image: browserless/chrome
    restart: always

  db.redis:
    image: redis
    restart: always
    volumes:
        - redis-data:/data
        
  proxy:
    image: jwilder/nginx-proxy:alpine
    restart: always
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy-tier

  letsencrypt-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy-tier
    depends_on:
      - proxy
      
volumes:
  ttrss_pgdata:
    driver_opts:
      type: none
      o: bind
      device: /example_path/_ttrss_pgdata # change path
  certs:
    driver_opts:
      type: none
      o: bind
      device: /example_path/_certs # change path
  vhost.d:
    driver_opts:
      type: none
      o: bind
      device: /example_path/_vhost.d # change path
  html:
    driver_opts:
      type: none
      o: bind
      device: /example_path/_html # change path
      
networks:
  proxy-tier:
  default:
